       	       	     +-------------------------+
                     |          CS 124         |
                     | PROJECT 6: FILE SYSTEMS |
                     |     DESIGN DOCUMENT     |
                     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Vaibhav Anand <vanand@caltech.edu>
Nikhil  Gupta <nkgupta@caltech.edu>
Michael Hashe <mhashe@caltech.edu>

>> Specify how many late tokens you are using on this assignment:  

0

>> What is the Git repository and commit hash for your submission?

    Repository URL:  https://github.com/MichaelHashe/CS124-OS
    commit        :  5a450a0fac269b83363c8f1d225f1bfb7c1a861d

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

On one of the computers we test one, some of the tests timeout when running make
grade. This happens very non-deterministically and almost never happens outside
of the context of make grade. On the remaining computers in the group, tests
never timeout.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

Stackover flow, wikipedia

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct inode_disk {
    volatile off_t length;           /*!< File size in bytes. */
    bool is_directory;               /*!< If inode represents a directory. */

    block_sector_t double_indirect;  /*!< Multilevel indirection. */

    unsigned magic;                  /*!< Magic number. */
    uint32_t unused[124];            /*!< Not used. */
};

The "double_indirect" field was added to inode_disk to implement indexing.

/*! In-memory inode. */
struct inode {
    struct list_elem elem;              /*!< Element in inode list. */
    block_sector_t sector;              /*!< Sector number of disk location. */
    int open_cnt;                       /*!< Number of openers. */
    bool removed;                       /*!< True if deleted, false otherwise.*/
    int deny_write_cnt;                 /*!< 0: writes ok, >0: deny writes. */
    struct lock extension_lock;         /*!< Lock to extend file. */
    struct inode_disk data;             /*!< Inode content. */

    int file_count;                     /*!< Count of files/subsdirectories. */
    struct lock dir_lock;               /*!< Lock to modify directory. */
};

The "extension_lock" field as added to inode to implement file extensibility.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

Since we are using only a single double indirection block, this references 128
single indirection blocks. Each of these reference 128 direct blocks. Each
director block references 1 sector, which can hold 512 bytes. As such, a single
double indirection block can hold a file upto 128*128*512 = 8 MiB long.

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

All inodes have an extension_lock field. Before any file is extended, this 
lock is acquired in the file's corresponding inode and released following 
extension. Once the lock is acquired, the design also confirms whether 
extension is still necessary given that another process may have already 
extended it.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

It doesn't (hence why syn_rw fails). By the point in our development where we
started considering this issue, we were too far along to accomodate the design
changes that this would require. The current behavior is to allow such reads,
which (presumably) return zeros.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

We implement a read / write lock, and switch it between readers and writers in
a series of rounds. In particular, readers are allowed to start reading until
a writer is blocked; once all current readers finish, the writer is allowed to
write. After the writer finishes, it allows readers to begin reading (or
another writer to write, if no readers are waiting).

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

The inode struct is a multilevel index. The struct contains a single 
doubly-indrect block. While a combination of direct, indirect, and doubly 
indirect blocks may have been more space-conservative for files of a 
smaller size, we found that using a single doubly-indirect block 
significantly simplified our design. At the same time, the single block 
still allows a max file size equal to that of the disk. 


			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct inode_disk {
    volatile off_t length;           /*!< File size in bytes. */
    bool is_directory;               /*!< If inode represents a directory. */

    block_sector_t double_indirect;  /*!< Multilevel indirection. */

    unsigned magic;                  /*!< Magic number. */
    uint32_t unused[124];            /*!< Not used. */
};

The "is_directory" field was added to inode_disk to implement subdirectories. 
It allows filesys functions to navigate the filesystem by knowing if a 
inode represents a file or a directory.

Also, "current_dir" was added to the threads struct and it has type 
block_sector_t. It represents the sector of the current working directory 
for the process.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

An absolute path is recognized by the first character in the path 
being '\'. Otherwise, it is treated as a relative path.

If the path is relative, the path is recursively searched (delimited by '\' 
character) starting from the current working directory until the last 
element (file or folder) is reached. The same process is done if the path is 
absolute, except the absolute path is used instead of relative path.


---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

Each inode contains a dir_lock; this is locked before any create or remove
operations. This lock is acquired before any checks on the existence of a file
is performed, so only one creation / deletion proceeds.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

Yes. After deletion, a flag is marked signifying that the directory has been
deleted. This is checked before any new files are allowed to be created.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

We put the sector the current directory of a processs with the 
"current_dir" field in the thread's struct. This way, it was attached to 
the process (by being in threads).


			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Lock on accessing cache table. */
struct lock cache_table_lock;

/* Cache of data */
static struct cache_entry sector_cache[CACHE_SIZE];

/* Read-ahead queue, clock-like index. */
static int read_ahead_buffer[CACHE_SIZE];
volatile int read_ahead_head;   /* Index for reading from queue. */
volatile int read_ahead_tail;   /* Index for writing to queue. */

/* LRU cache. */
static struct list cache_lru;


enum lock_mode {
    UNLOCK,                         /* No one occupies lock. */
    READ_LOCK,                      /* Readers occupy lock. */
    WRITE_LOCK                      /* Writer occupies lock. */
};

struct lru_entry {
    block_sector_t sector;          /* Sector number. */

    struct list_elem elem;          /* Required for list. */
};

struct cache_entry {
    volatile int sector;            /* Sector number loaded into cache. */
    bool access;                    /* Has sector been accessed. */
    bool dirty;                     /* Has sector been written to. */
    char data[BLOCK_SECTOR_SIZE];   /* Actual sector data. */

    /* Implement read/write lock. */
    struct lock cache_entry_lock;

    struct condition readers;       /* Condvar for readers. */
    struct condition writers;       /* Condvar for writers. */

    /* Count of waiting processes. */
    uint8_t reader_active;          /* Threads currently reading. */
    uint8_t reader_waiting;         /* Threads waiting to read. */
    /* Writer_active should only ever be one or zero. */
    uint8_t writer_waiting;         /* Threads waiting to write. */

    enum lock_mode mode;            /* Who currently holds lock. */
};

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

We use an LRU replacement policy. Instead of checking access bits every
timer tick, we check before each eviction (this is largely to avoid 
concurrency issues). At each eviction, the block at the tail of the 
LRU queue is evicted, and a new block is appended to the front.

>> C3: Describe your implementation of write-behind.

Write behind is a kernel thread that gets started on system init. The thread
goes through the whole cache table and writes each sector (if it is dirty) to
disk, clearing its dirty bit. It does this while holding the cache table lock.
When it finds a dirty sector, it obtains that cache slot's lock (possibly
blocking on it), writes it to disk, and then releases the lock. After it has
gone through the whole table, it releases the cache table lock and sleeps.

>> C4: Describe your implementation of read-ahead.

The read ahead implementation is very similar to the write behind
implementation. It reads through its queue while holding the cache table lock.
It checks to see if the sector has already been loaded into the cache. If it
has, then it does nothing for that slot. If it hasn't, it tries loading it
into the cache, evicting something if necessary. After it goes through the
whole queue, it releases the cache table lock and sleeps.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

When a process is using the cache block, it holds that cache block's lock. If
there are multiple readers using it, the last reader that finishes (as kept
track of by a count) releases the R/W lock, and either gives it to a writer or
marks the block as unlocked. As such, when a process is actively reading or
writing a slot, it necessarily holds the lock on that slot.

On eviction, once a victim (a cache slot) is chosen, we acquire that slot's
lock. This means that the eviction cannot procede until it acquires the lock
which means that no one else can be actively using it. As such, an eviction
cannot occur when another process is reading and writing. 

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

This follows a very similar logic. On eviction, once a victim is chosen, we
require the cache slot's lock. Any r/w operations on a slot require this same
lock so they cannot procede until they acquire the lock. In order to prevnt the
sector that is loaded in a certain slot from being pulled out from under the r/w
operation, once we acquire a certain slot's lock, we check to make sure that it
is still the sector we want. If it isn't, we then release the lock and while
loop and try again.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

Repeated accesses to the same file(s) is likely to benefit from caching. Read-
ahead is likely to benefit sequential scans, i.e. for data processing. Write-
behind is likely to benefit sequentual writes, in making eviction operataions
less costly.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?

