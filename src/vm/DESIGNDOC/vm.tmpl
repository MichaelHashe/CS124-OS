       	       	    +---------------------------+
                    |           CS 124          |
                    | PROJECT 5: VIRTUAL MEMORY |
                    |      DESIGN DOCUMENT      |
                    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Vaibhav Anand <vanand@caltech.edu>
Nikhil  Gupta <nkgupta@caltech.edu>
Michael Hashe <mhashe@caltech.edu>

>> Specify how many late tokens you are using on this assignment:  

0

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL:  https://github.com/MichaelHashe/CS124-OS
   commit        :  905eccc18b6c0717da595d0148347cc729e7acba

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

We implemented an eviction policy using a timer (Clock-LRU).
Many of the commits for this assignment correspond to team members 
working on other team members computers.


>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

Stack overflow.


---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

Vaibhav: 30 hours
Nikhil : 30 hours
Michael: 30 hours


>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

Vaibhav: supplementary page table, sync, swap table
Nikhil : mmap, frame table, sync, paging
Michael: eviction, sync, dirty bits, stack growth, paging


Note that this design document is a bit long.  Most of the questions can be
answered pretty briefly.  Don't feel a need to write a long answer if it is
not required by the question.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread {
    struct sup_entry ***sup_pagedir;    /*!< Supplemental page directory. */
};

/* Mapid identifier. */
typedef int mapid_t;

struct sup_entry {
    uint32_t frame_no;   /* Frame number which data was loaded into. */
    swapslot_t slot;     /* Swap slot index if mapped into a swap slot. */
    bool all_zero;       /* If an initially all-zero page. Else, a file. */

    /* File-specific fields */
    struct file * f;     /* Pointer to file to be opened. */
    unsigned file_ofs;   /* File loaded into page at fd's offset. */
    unsigned page_end;   /* File ends at this location in page. */
    bool writable;       /* Whether the page is writable. */
    bool loaded;         /* Whether data has been successfully loaded. */
    mapid_t mapid;       /* Map id if mapped with mmap. */
};


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

If the data is already loaded into memory, it is already loaded into the
process's page table. As such, it will not page fault and we will have nothing
to handle.

We obtain the frame through a one to one mapping that we maintain. Given a
virtual address, you can get a kernel virtual address through the process's page
table. This kernel virtual address is in a one to one mapping with the frame
table. The frame number is just some of the upper bits of the kernel virtual
address.

If the frame is not currently loaded, the process will page fault on an
attempted load. The handler will check if the fault was due to an attempted
access on the stack (discussed later) or something else.

If it is something else, the address is checked against the supplementary page
table. This supplementary page table maintains all the information about the
location of the data: whether it is in a frame, the disk, swap slot, or memory.


>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

Whenever the accessed or dirty bits are needed, they are reconciled. In
particular, this means that we loop through all the elements in the
supplementary page tables and check each of their accessed and dirty bits from
the actual page table. These values are then or'ed with the corresponding
accessed and dirty bits in each frame table entry.


---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

We were unable to use our locks to prevent all races. In particular, adding 
locks broke a few of the other tests. Our idea for managing this (which is 
not implemented in the current code, but is likely in one of the repo's old 
commits) was to have two locks; one global lock on the frame table (say, 
ft_lock) and one lock for each of the frame table entries. Whenever a process 
requests a frame, it enters get_frame. At the top of this function, the 
process would then acquire ft_lock. Once it does, it would select a frame 
that is currently unlocked, acquire its lock and then free ft_lock. Once the 
frame is added into the new supplemental page directory in page.c, the lock 
can be released; after this point, it serves as a normal, evictable, frame.

We also considered (and in an old commit implemented) placing locks on swap 
operations, disk i/o operations, and/or supplemental page table entries.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We used a supplementary page table that exactly shadowed the original page
table. This allowed us to have easy logic in keeping the two in sync.
Additionally, this means that we do not use an excessive amount of space because
we can keep the tables nested in the directory as NULL until they were 
required. Each entry in the supplementary page table is a sup_entry struct 
which allows us to add as much information as we need for any given entry.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread {
    uint32_t num_stack_pages;           /*!< Number of pages in stack. */
};

/* Last_mapid is a global count of the number of file mappings. Used to
   ensure unique mapids for all files. */
static mapid_t last_mapid;

/* Used internally by swap block device; included here for consistency. */
typedef size_t swapslot_t;

/* Constants used to maintain swap state. */
static struct bitmap *swap_slots;  /* 1 if allocated/in-use, 0 if available. */
static int swap_num_slots;    /* Number of slots in swap_slots */

/* Block device defined in devices. */
static struct block *swap_block;   /* Swap block device */

struct frame_table_entry {
    void* page;     /* pointer to page currently occupying entry */
    bool acc;       /* Bit indicating the page has been accessed. */
    bool dirty;     /* Bit indicating the page has been modified. */
    bool user;      /* Set if allocated from user pool. */
    bool valid;     /* If frame is a valid place in memory. */
};

/* Global frame table. */
struct frame_table_entry** frame_table;

/* Clock-LRU list. Modified by timer interrupts. */
static struct list lru;


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We implement the Clock-LRU policy. In particular, we keep track of
all frames currently used, and maintain a queue (roughly) ordering them
from most recently to least recently used. This queue is refreshed at
every timer interrupt, during which the access bit in each frame table
entry is recalculated (as described above); if the access bit is set,
the frame is sent to the end of the queue. Whenever a frame is evicted,
the frame at the front of the queue (roughly the least recently used)
is chosen.


>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

When this happens, that means that the frame that process Q previously
had is now written to swap. This is kept track of in process Q's 
supplementary page table. In particular, in the entry, the frame 
number is given a certain invalid value and the swap slot is given
the number of the swap slot process Q now occupies. 


>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

We check if the page fault is below the stack pointer, or within the 
32-byte limit at which pusha might fault. We also check that the write
is within our 8MB-per-process stack limit. If it is, we 
allocate pages onto the stack until we either include a page covering
the faulted address or hit our stack depth limit, at which point the 
access would cause an uncaught page fault.


---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

As mentioned above, we had some ideas about how to approach synchronization,
but were unable to get it to work. Our idea for frame table locks could
easily prevent deadlock; all that needs to be ensured is that no process
holding the global lock is permanently blocked on obtaining a frame (the
reverse case never occurs; if we are at the part of the code where we are
obtaining a frame, we necessarily have the global lock). This is easy
enough to ensure; all paths out of get_frame immediately release the
frame table entry lock after adding it to a page directory (or failing).
Thus, a process waiting to obtain that frame must simply wait until it is
finished being initialized, and a process waiting on the global lock must 
simply wait until the first process obtains that lock.


>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

Global locks around the frame table; only one evictable frame is chosen 
at any given time. Q could not fault the page back into the same frame 
slot becasue that frame slsot would have a lock on it.


>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

Individual locks around each frame table entry; this lock is initialized
whenever that frame is chosen to be evicted, and only released once 
initialization is finished.


>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

We rely on page faults. Our current design has no mechanism for pinning because
we didn't see a need for it in our design, but essentially all virtual pages 
are pinned since we only evict user pages. For syscalls at least, accesses to
invalid virtual addresses are caught before access, when all pointers are
verified. If an invalid address is passed, the offending process is then
terminated. All other invalid accesses terminate the process as well in page 
faulting, which checks the validity of the fualting address.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make synchronization
>> easy, but limit parallelism.  On the other hand, using many locks
>> complicates synchronization and raises the possibility for deadlock
>> but allows for high parallelism.  Explain where your design falls
>> along this continuum and why you chose to design it this way.

Our design is fairly compact; this is a combination of a.) not actually
being implemented (we'd probably have to add in additional locks for 
paging), and b.) a reflection of the fact that a global lock on the 
frame table is unnecessarily limiting; so long as we limit access to
frames being changed, all other accesses shouldn't cause problems.


			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct sup_entry {
    ...
    /* Used to maintain a global index of mmap'ed files. */
    mapid_t mapid;       /* Map id if mapped with mmap. */
};


---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

When a file is memory mapped, it is lazily loaded such that supplemental 
table entries at the approriate addresses are created with the appropriate 
offsets in the file map. Then, when an address in the mapped region 
has a fault, the related entry is used to load the file's data from disk 
into an empty frame, which is then linked to the faulting virtual address.

When a page fault occurs, the address accessed is found in the supplemental page
table for the process (if not, it terminates). If the fault is not a r/w i/o
violation, it continues. If the entry in the supplemental table is installed in
the swap table, it is loaded into an empty frame. Else, the file for the entry
is loaded from disk into an empty frame. The empty frame is then linked to the
faulting virtual address.

The only pages that are evicted are user pages installed in the frame table 
(in memory and not in the swap table).


>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

Upon the mapping a file to memory, we verify that all pages in the supplemental 
page table that would be required by the file's size and the virtual address 
are available; we return a mapping fail if any are occupied. Since this 
table maintains the state of all mapped objects for the process, if any of 
the necessary segments are occupied, we know that the new file overlaps an 
existing segment.


---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

On unmapping or on process exit, an mmap'ed file is written back to the original
file. As such, the implementation of data demand-paged from executables is
pretty much the exact same as an mmap'ed file. The difference is that a data
demand-paged is originally an all 0 file, (denoted by having a read length of
0). We store the file length (read length) in the particular supplemental page
table entry. For a data demand-paged, it doesn't read anything from file on the
inital load. As such, the file length is 0 so it has 0 file length (stored in
the frame table) so on process exit, does not get written back to disk.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

This was quite a difficult assignment. I guess a lot of it was we were trying to
design a system without having too much background knowledge about how all the
parts played together. I wouldn't say it was too difficult or too easy. It felt
like there were a lot of distinct components we had to implement (many of which
could be a CS 24 like assignment on its own) so it took a lot of time in that
regard.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Yes, it was pretty cool working at such a level that you rely on very low level
CPU behaviour, like page faults, accessed/dirty bits, finding stuff in the page
table.

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

Not really.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

I can't think of anything that wouldn't detract from the design orientated
nature of this project.

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?


