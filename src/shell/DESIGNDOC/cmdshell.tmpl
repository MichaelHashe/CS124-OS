			+------------------+
			|      CS 124      |
			| PROJECT 1: SHELL |
			|  DESIGN DOCUMENT |
			+------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Vaibhav Anand <vanand@caltech.edu>
Nikhil  Gupta <nkgupta@caltech.edu>
Michael Hashe <mhashe@caltech.edu>

>> Specify how many late tokens you are using on this assignment:  
1 late token

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL:  https://github.com/MichaelHashe/CS124-OS
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please include them here.

extra credit:
multiline commands
append output redirection (>>)
redirection using an integer file descriptor (2>)
advanced redirection: duplicating file-descriptor (2>&1)
    history command and associated functionality
    allowed to run old command with !n

extra functionality:
    replace home directory with ~


>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

Stack Overflow, random C documentation, man pages, 
https://cnswww.cns.cwru.edu/php/chet/readline/history.html

			   COMMAND SHELL
			   =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

Vaibhav: 
Nikhil : 
Michael: 

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

Vaibhav: Vaibhav focused on the command execution including redirecting file
descriptors.
Nikhil: Nikhil focused on the tokenizer, main loop, and history implementation.
Michael: Michael focused on the command parser (putting the tokens into structs)
and main loop.

---- DATA STRUCTURES ----

>> A1: Describe how your command shell manages parsing and executing
>> commands that contain arguments and pipes, using the example
>> command "a arg1 arg2 | b arg1 | c arg1 arg2 arg3".  How does your
>> shell internally represent such a command?

First, the line is tokenized into its component pieces such as words, strings,
redirects, pipes, etc.

>> A2: Now, given the command:
>> "a arg1 arg2 < inp.txt | b arg1 | c arg1 arg2 arg3 > out.txt"
>> Briefly explain specifically how the redirections are parsed and
>> represented, and by what processes.

For this specific example, first the command would be tokenized into all its
component pieces. Since this is a nice command, it would just be tokenized by
the spaces.

---- ALGORITHMS ----

>> A3: Illustrate how you solved the problem of setting up
>> redirection in a simple command like "a < inp.txt > out.txt", by
>> describing what process takes care of the redirection and when.

>> A4: Illustrate how you solved the problem of setting up the pipes
>> between multiple operations in a single command, by describing
>> what each process is responsible for.  For example, given the
>> command "a | b | c", describe the sequence of steps in setting up
>> the processes and their pipes, starting with your command shell's
>> process, and going through the execution of programs a, b and c.
>> Keep your description of each process' responsibilities limited to
>> ~25 words or less.

>> A5: Similarly, describe the details of how terminated processes are
>> reaped in the example command "a | b | c".

>> A6: Similarly, describe which processes are responsible for setting
>> up the redirections in the example command
>> "a < inp.txt | b | c > out.txt".

---- RATIONALE ----

>> A7: Why must the chdir and exit commands be implemented as built-in
>> functions, rather than external programs?

They must be built in functions in case everything breaks (you override the PATH
variable, delete the bin directory, etc.), you still want some basic
functionality such as the ability to exit the shell or move around to see what
is wrong.

>> A8: Why did you ultimately choose this design?  In what ways is it
>> superior to other designs you considered as you developed your solution?

>> A9: Did you take any steps to facilitate development of the command
>> shell in parallel, e.g. designing shared data structures or integration
>> points up front?  How well did your approach work for your team?  Feel
>> free to share any positive or negative experiences in this vein.

We split the project up into relatively distinct chunks: main loop, tokenizing,
parsing, execution. The main integration point was the specific structure the
tokens were parsed into. This was one of the later pieces actually implemented
so we designed a basic struct to use for the execution piece.


			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

We didn't think there were any particularly difficult or easy parts of the
assignment. It was overall a pretty good assignment with it taking about the
proper time.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Having to install all the file descriptors to redirect inputs and outputs gave a
lot of insight into how the system actually opens and maintains files.

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

Not really.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

One thing that could be nice is clarifying what edge cases need to be handled.
One example was that running echo hel"hi"lo prints helhilo which is a little
odd.

>> Any other comments?

