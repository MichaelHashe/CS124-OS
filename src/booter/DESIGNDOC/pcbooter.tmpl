			+-----------------------+
			|         CS 124        |
			| PROJECT 2: BOOTLOADER |
			|    DESIGN DOCUMENT    |
			+-----------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Vaibhav Anand <vanand@caltech.edu>
Nikhil  Gupta <nkgupta@caltech.edu>
Michael Hashe <mhashe@caltech.edu>

>> Specify how many late tokens you are using on this assignment: 
2 late token 

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL:  https://github.com/MichaelHashe/CS124-OS
   commit ...                                                                   TODO

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the       TODO
>> TAs, or extra credit, please give them here.

   Coolness Factor 
   Graphics mode 0x13 (VGA, 320x200, 256 color)
   Bootable flash drive
   Tone generation

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

Stack Overflow
http://webpages.charter.net/danrollins/techhelp/0089.HTM
http://www.ee.bgu.ac.il/~microlab/MicroLab/Labs/ScanCodes.htm
http://wiki.osdev.org/PS/2_Keyboard
http://wiki.osdev.org/%228042%22_PS/2_Controller
http://wiki.osdev.org/PC_Speaker

			     PC BOOTER
			     =========

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

   Veb: 30
   Nikhil: 20
   Michael: 20

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

   Veb: Bootloader, keyboard, game.
   Nikhil: Bootloader, interrupt, video, sound.
   Michael: Bootloader, timer, game. 

Note that this design document is a bit long.  Most of the questions can be
answered pretty briefly.  Don't feel a need to write a long answer if it is
not required by the question.

			     GAME / DEMO
			     ===========

---- ALGORITHMS ----

>> A1: In a few sentences, describe what kind of game or demo program your
>> PC booter implements.

We implemented a trimmed down space invaders. The game infinitely repeats a
single level, but plays very similarly. You can shoot enemies, enemies can shoot
you. Enemies speed up as you kill them.


>> A2: In a few sentences, how does the user interact with the program?
>> What are the controls?  What should the user try to do?

The user can use the left and right arrow keys to move and the space button to
shoot. Pressing the 'r' key resets the game and the 'p' key pauses/un-pauses 
the game. To make the game more competitive, the user is limited to firing
5 bullets at a time.

The user should try defeat all the aliens by shooting at them, before they 
reach the user and the user loses. Similarly, the user should avoid being
hit by the bullets shot by the aliens.

---- DATA STRUCTURES ----

>> A3: Describe any global state that your program manages in order to 
>> perform its operations.  Don't focus on state managed within interrupt
>> handlers; we will look at that later.  Rather, focus on state that is
>> part of the game implementation itself.

The keyboard keeps a circular queue (as a fixed size array) and read/write 
indexes in the queue.

The timer keeps the variable "time" as a 32 bit unsigned value. It is
incremented through regular timer interrupts.

The space-invaders game-play is held in a single struct Space_Invaders, which 
includes the size, location, and existence of objects drawn on the screen, 
and if the game is won/lost/in-play.

The video and sprites modules store "images" as arrays used in the game.

All bullets currently in play are stored in two circular arrays, one for 
bullets fired by the user and one for bullets fired by the aliens.

All enemies (dead and alive) are stored in a 2D boolean array (0 for dead,
1 for alive).


---- SYNCHRONIZATION ----

>> A4: From the perspective of the entire program, briefly describe how 
>> the various interrupts are handled and processed within your program.
>> For example, when a timer interrupt occurs, what is the general sequence
>> of operations or updates that is performed within your program?
>> Similarly, when a keyboard interrupt occurs, what does your program do
>> in response?

A timer interrupt calls the irq0_handler, which saves state and then increments
the time value through the c function timer_handler that it calls.

They keyboard interrupt adds the key-code to the queue of key-codes at the write 
index and increments the write index.

The program's eventual response to both interrupts occur through polling.


>> A5: Would you say your program relies on polling or busy-waiting anywhere
>> to accomplish its tasks?  If so, what tasks?

After services are initialized (video, timer, keyboard, etc.), the game 
enters a game loop.

The game loop is a while-loop in which the user's key-presses are polled. Also, 
the various objects are redrawn in the display when specific intervals of time 
are reached. So, no busy waiting occurs in standard game play. When the game is 
not drawing, it is polling key-presses so that it can respond instantaneously.

When a game ends/resets, the program sleeps for 1.5 seconds, which is the only 
instance of busy waiting in the program.

---- RATIONALE ----

>> A6: Why did you choose the project you did? 

Space invaders is a classic game that most people have played at some point. It
is also simple enough that it is feasible to implement with the limited
functionality available in this system. It offered obvious opportunity for 
graphical implementation.


>> A7: Did your choice of project affect any of the specific implementation
>> details of the various subsystems that you needed to use?  (For example,
>> if you implemented a scrolling game, did you implement specialized high-
>> performance video code to scroll the screen?)

The choice of space invaders affected the video subsystem some. In particular,
it pushed us towards using a modular system that can take in sprite definitions
because we needed to be able to draw ships, aliens, and bullets.


>> A8: Did you run into any technical or resource limitations in the 
>> implementation of your program?  (For example, bootloader didn't fit,
>> or a really useful standard library wasn't available, or you couldn't
>> achieve the desired performance level, etc.)  If so, what steps did you
>> take to try to overcome those limitations?

Having the stdio library would have been useful in debugging various parts of 
the program (especially at the beginning, before video functionality). Our 
alternative was to use GDB and step through the program.

Our program could handle drawing at a high frame rate very well, so there were 
no apparent resource limitations.

While it would have been useful to use some of the standard library functions,
we were able to manage pretty well without them. One of the more difficult
aspects of not having the standard library was being unable to do sanity checks
via printf. In the end, we used gdb instead. While this took longer, it was just
as effective.

Another issue we ran into were some issues with the emulator. The game behaved a
little differently in the emulator and when booted from a physical disk. In
particular, in the emulator, sometimes the video memory would stop updating the
screen, even though the correct values were being written to memory. In the
emulator, sound was working correctly, but when booting from a physical disk, we
couldn't get sound to work.


			     BOOT SECTOR
			     ===========

---- DATA STRUCTURES ----

>> B1: How did you decide to store the Disk Address Packet?  Does the
>> memory occupied by the DAP get reclaimed after it is used?  If not,
>> why not?

We stored the Disk Address Packet on the stack. We reclaim the memory by popping
it off the stack, thereby restoring the location of the stack pointer.


>> B2: How many sectors does your bootloader load?  How did you arrive 
>> at this number?  Briefly explain your rationale.

Since the Makefile simply moves program.bin into floppy.img right after 
boot.bin (which is 512 bytes = 1 sector), we can divide the number of bytes of 
program.bin by 512 and round up to the next integer, which will be the number 
of sectors we need.

Our program.bin is ### bytes, which meant we needed to load ### sectors.        TODO


>> B3: Does your bootloader pass any information to the main program?
>> (If not, just say no.)  If so, what information is passed, and how
>> is it passed?

No.


---- ALGORITHMS ----

>> B3: Briefly describe how your bootloader brings your program into 
>> memory.  Does it perform one large load, or multiple smaller loads?

The bootloader performs one large load, so it only makes one disk interrupt.


>> B4: Did you add any BIOS calls to your bootloader to prepare for your
>> main program?  (i.e. things that aren't available in protected mode)

Yes. We use a BIOS call to change the display mode to 0x13 (VGA, 320x200, 
256 color). We also use a BIOS call to load the program into memory.


			  VIDEO SUBSYSTEM
			  ===============

---- DATA STRUCTURES ----

>> C1: What video display mode does your program use?  Is it a text mode
>> or a graphical mode?  Where does the video buffer start?  How is data
>> represented in this mode?  (Please be brief; we don't need complete
>> documentation on the video system.)

We are using VGA, 320x200, 256 color. This is a graphical mode. The video buffer
starts at 0xA0000. The video memory is linear with 1 byte for each pixel. For
example, 0xA0002 corresponds to the pixel (2, 0). The byte at a specific memory
location corresponds to the color. It uses the same first 16 colors as other VGA
and EGA modes and then after that, it has various colors, different scales, and
brightnesses.

>> C2: Does your video code maintain any variables or data structures to
>> facilitate video output?  Briefly describe these values and their
>> purposes here.

The video code does not maintain any variables. All that information is
maintained as part of the game state. The only data structure the video code
maintains is an array of digits so that printing numbers to the screen is a
little easier (you can reference a number by its location in the array instead
of the bitmaps name).

---- ALGORITHMS ----

>> C3: What abstraction does your video code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.

The video code is built like an API. It contains methods to draw pixels, boxes,
bullets, and sprites. The sprites are defined in sprites.h as a constant array
of values, which can be read in by the draw_sprites function and drawn. This
gives the video API a lot of portability to draw arbitrary objects.

---- RATIONALE ----

>> C4: Did you take any specific steps to improve the appearance of your
>> program's display output?  For example, using Extended ASCII Codes, or
>> choosing specific colors to represent different things?

Since we are using a full graphical mode, we did not need to take many steps to
improve the program's display output. However, since it was a full graphical
mode, we only had the ability to draw pixel by pixel so we implemented a system
that can draw from a static array to give the subsystem portability to draw
arbitrary objects.

			  TIMER SUBSYSTEM
			  ===============

---- DATA STRUCTURES ----

>> D1: What state does your timer subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.

The timer subsystem just manages the time state, which is the number of timer 
ticks (interrupts) that have occurred so far. This timer is used to manage game 
speed via a sleep function that busy waits for the correct time to elapse and 
then returns. There is also a function to return the time elapsed since the 
start of the timer, in milliseconds.

---- ALGORITHMS ----

>> D2: What abstraction does your timer code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.

The only abstraction the timer code presents is a sleep function to wait some
number of seconds (can be a fraction).

>> D3: Did you change the timer frequency from 100Hz?  If so, what did you
>> change it to, and why?

No. That being said, we are also using timer channel 2 for the speaker. We
changes this channels frequency to correspond with the desired tone's frequency.

---- SYNCHRONIZATION ----

>> D4: Given how your program handles timer events, is there any potential 
>> for timer interrupts to generate race conditions in updating your
>> program's global state?  If so, what steps did you take to ensure that
>> such situations cannot occur?

The program only responds to interrupts (namely keyboard and timer) using
handlers that do not execute other functions and disables interrupts during
their execution. The timer updates a variable which is then used in the main
loop.

This design removes the potential for race conditions.

			KEYBOARD SUBSYSTEM
			==================

---- DATA STRUCTURES ----

>> E1: What state does your keyboard subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.

The keyboard maintains a circular key queue that all the key presses go into.
The main loop then accesses the key presses by reading from the queue. Since it
is a circular queue, the subsystem also maintains a read index (where the main
loop reads from) and a write index (where the interrupts writes the key codes
to).


>> E2: How do your data structures handle keys with multi-byte scan-codes? 

No keys with multi-byte scan-codes are used or handled (we only use space-bar, 
left, right, and 'r', 'p').


---- ALGORITHMS ----

>> E3: What abstraction does your keyboard code present to your main program? 
>> Briefly describe the higher-level operations you decided to implement.

The keyboard code only presents a method key_queue_pop to pop key codes from the
key queue. This method takes a code from the queue and increments the read
index.


>> E4: Does your keyboard subsystem expose scan-codes directly to your main
>> program, or does it preprocess them and expose other information to your
>> main program?  If scan-code data is preprocessed, briefly describe what
>> information is actually exposed, and how it is derived from scan-codes.

It exposes scan codes. We did this because it made more sense to process the
scan codes in the context of the game. Its header file exposes mapping of 
keycodes to semantically defined names as constants.


---- SYNCHRONIZATION ----

>> E5: Given how your keyboard interrupt handler operates, is there any 
>> potential for race conditions in updating the keyboard subsystem's
>> internal state?  If so, what steps did you take to ensure that such
>> situations cannot occur?

The keyboard disables interrupts when it handles an interrupt. It also disables 
interrupts while popping from the queue of key-codes. Since these are the only 
two places where the keyboard's internal state (queue and indices) are 
modified, this ensures that race conditions do not occur.


>> E6: Given how your program handles keyboard events, is there any 
>> potential for keyboard interrupts to generate race conditions in updating
>> your program's global state?  If so, what steps did you take to ensure
>> that such situations cannot occur?

There is no potential to generate race conditions in updating the global state
because when we are accessing keyboard scan codes from the queue, we turn off
interrupts. This ensure that no race conditions occur.


---- RATIONALE ----

>> E7: Why did you choose the design and data representation that your
>> keyboard subsystem uses?  How is it suited to your program's overall
>> operation?

A circular queue is easy to implement given how little framework we have at this
level, and it fully serves the purpose of the keyboard. It allows us to buffer
key presses.


			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

It was not too difficult but it took quite a bit of time because there was not
as much guidance or pointing to relevant documentation.


>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Yes, this assignment helped us to learn a lot about most of the systems
involved. We learned a lot about where different parts of systems go in memory
(boot-loader, program, interrupts).


>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

I think it would be helpful to have more documentation on certain parts like the
interrupt descriptor table and DAP.


>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

N/A


>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

N/A


>> Any other comments?

N/A

