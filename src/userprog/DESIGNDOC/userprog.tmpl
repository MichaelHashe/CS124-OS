                     +--------------------------+
                     |          CS 124          |
                     | PROJECT 4: USER PROGRAMS |
                     |     DESIGN DOCUMENT      |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Vaibhav Anand <vanand@caltech.edu>
Nikhil  Gupta <nkgupta@caltech.edu>
Michael Hashe <mhashe@caltech.edu>


>> Specify how many late tokens you are using on this assignment:  

1 late token.


>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL:  https://github.com/MichaelHashe/CS124-OS
   commit        :  


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

We get different behavior depending on whether the VM has 1 processor or
multiple processors. This is unusual since pintos is a single threaded emulator.
Please run with 1 processor.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

Stack overflow. man pages.

			   USER PROGRAMS
			   =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

Vaibhav: 28 hours
Nikhil : 28 hours
Michael: 25 hours


>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

Vaibhav: argument passing, syscall wait()
Nikhil:  wait, deny writes, user memory access, file descriptor, status passing
Michael: syscalls, file descriptor, struct architecture


                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

No structs were added or modified for this section.


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Calling conventions dictate that the pointers are pushed representing args from 
right to left. Since parsing is left to right, a temporary array of pointers 
was kept.

The command was parsed and pushed to the stack from left to right, 
while the pointers were added to the array. Then, the array was iterated in 
reverse while its pointers were pushed to the stack such that pointers were 
pushed representing args from right to left.

To avoid overflowing, the length of the commandline was limited to 128 
characters/bytes since this is the maximum that Pintos will accept.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

The strtok_r() function is reentrant and maintains state when called by 
multiple processes, whereas strtok() is not.


>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

By parsing the commands in the shell rather than kernel, parsing can
be handled differently by different shell programs. Additionally, the kernel
lighter (=> faster). It also allows for the shell to setup file redirection, 
which is a mostly user space application.


                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We added the following fields to the thread struct:
    1. tid_t parent_tid;  
    The thread id of the parent of self. 
    
    2. bool parent_waiting; 
    Whether parent of self is waiting for self to finish 

    3. struct list children;
    Linked list of thread IDs that are children of self. Contains 
    process id info as well as status code if it has exited. 

    4. int exit_code;
    A child knows its own exit code so that it can print it 
    properly as it exits.

    5. struct list fds;
    A linked list of file descriptors this thread holds.

    6. struct file *binary;
    File object for file which this thread was started from.

    7. struct semaphore success_sema;
    Ensures parent's exec doesn't return until child loads.


Additionally, we defined the following structs: 


/*! File descriptor. */
struct file_des {
    int fd;                /*!< Numeric file descriptor. */
    struct file* file;     /*!< File struct pointer. */

    struct list_elem elem; /*!< Pointers to previous, next file descriptors. */
};

The file descriptor struct is used to keep track of files opened by a given
process. They are stored in the fds list noted above.


/*! Child of a thread. */
struct child {
    tid_t tid;                /*!< tid of child. */
    int exit_code;            /*!< Exit code. */
    bool load_success;        /*!< Success of load. */

    struct list_elem elem;    /*!< Pointers to previous, next child. */
};

The child struct holds references to each child of a process. It allows a parent
to monitor the progress of any of its child processes.


In syscall.h, we define "typedef int pid_t"; this is simply to mimic the 
conventions used in calling syscalls.

We also define a global lock "static struct lock filesys_io"; this lock is 
obtained whenever a process attempts a filesystem operation, and is used to
prevent I/O related race conditions.


>> B2: Describe how file descriptors are associated with open files.            
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are unique within a single process. Specifically, any process
asigns file descriptors in a strictly increasing order. Multiple processes
can (and do) have files with the same descriptor (i.e., STDIN and STDIO have
the same value across all processes).


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

After verifying the stack, both calls parse arguments off the stack. The buffer
and the file descriptor are verified. STDIN and STDOUT are handled according
to the Pintos guidelines. Each thread maintains a list of all the file 
descriptors it has open. As such, given a certain file descriptor, we can see 
if the thread owns it. If so, we can access the file object associated with it, 
and use that for the filesystem read and write calls. If a file is invalid, we
return errors codes (-1 for read, 0 for write).


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

Neglecting calls to pagedir_get_page() that occur from validating our
syscall inputs, either load causes at most two and at fewest one page
install, which calls pagedir_get_page(). Since each of these calls could
fit on a single page, we could limit ourselves to one page inspection by 
offsetting our page to start at the beginning of data (which seems to occur
in process.c already).


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

To implement this, we had parents set a boolean (flag) in their child 
process before blocking. Then, when the child process exits, it checks if 
this flag is true; if so, it unblocks its parent (t->parent_tid).

In the case that the child_tid passed was invalid, we return -1, and if 
the child already exited, we stored the exit status codes of the children 
in parent->children.


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We functionalized a good portion of error handling, particularly with regards to
argument parsing. This makes the actual syscalls somewhat easier to deal with.
Any changes that need to be made can be made in just one position, which is
propagated. 

If an error is detected, thread_exit() is called. During thread exit, we 
loop over all resource lists maintained by the thread (locks, children, files)
and free everything. This also occurs during the normal course of thread_exit,
as a check against processes simply neglecting to free their locks.

The general idea was to functionalize as much as possible so making changes was
easier. Additionally, we had threads manage most of the objects in the kernel so
that when a thread exited, it knew exactly what it had created, so it could free
it properly.

For instance, there is a function to read an argument off the stack.
This function also calls verify_pointer which verifies that that argument is in
valid memory.

A thread opens a few files. It puts these in a list of file descriptors. It
tries to read from one of the file descriptors using read. It passes in a
buffer, and a size. If buffer is a valid pointer and the end of the buffer is a
valid pointer for the user process, the file system call read gets executed. If
not, the thread is terminated. On the threads exit, all the file descriptors,
children, and locks are looped through and freed.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We ensure this by using a semaphore. The parent thread calls sema down so blocks
and the child thread calls sema up on finishing loading. The status is passed
back through the parent thread. The child thread knows who its parent is so can
access its parent and then set the load status in the parent. We have just one
field for this because the parent can only be waiting for one child to load.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

Before C exits: The parent process blocks itself and sets a flag to let the
child know it is waiting on it. On exit, the child checks this flag to see if
the parent is waiting on it. If so, it unblocks the parent using the parent's
ID.

After C exits: The parent keeps a list of all its past children. This works
because thread IDs are not reused so it can uniquely identity a child. Given the
ID, the parent checks if that ID has ever been a child. If it has, it can return
the childs exit status. It then overwrites that exit code to -1 for subsequent
calls. The malloc'ed memory is then freed on thread exit.

If P has terminated, on exit, the child sees if its parent is still alive. If it
isn't, then it doesn't bother setting any of the status flags that the parent
owns.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

It is a nice functional implementation so that if one change needs to be made,
it is propagated everywhere. We chose to deal with everything from the kernel as
opposed to deal with page fault exceptions because it seemed like a more
straightforward way to do it.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

The design for file descriptors lets every thread know exactly which file
descriptors is owns. In addition, there is a one to one mapping of fd and file
objects, to reduce completexity. At the same time, this might add a little
overhead.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We did not change it.

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

This assignment was not too difficult. There was a lot of time in the beginning
spent understanding the system, which felt like we weren't making much progress,
but after this initial debt was fulfilled, quick progress was made.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Implementing system calls gave us a lot of insight into how it interacts with
the file system.

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

No.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

The test suite is very useful in that it gives you how your system is supposed
to act on edge cases.

The Pintos documentation recommends to implement argument passing in 
process_execute(), which is not nearly as convenient as inside setup_stack() 
(which was also discovered on Piazza).

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

No.

>> Any other comments?

